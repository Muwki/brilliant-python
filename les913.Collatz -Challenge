Collats Challenge

Consider the following sequence:
Choose a positive integer.
If the number is even divide it by 2, and if it is odd multiply by 3 then add 1.
Repeat step 2 with the new number.
The Collatz conjecture asserts that following these steps will always lead to 1, for any starting integer greater than 0.

As an example, starting with 3 leads to the following steps:

step 1:  3×3+1=10
step 2:  10÷2=5
step 3:  5×3+1=16
step 4:  16÷2=8
step 5:  8÷2=4
step 6:  4÷2=2
step 7:  2÷2=1
So it takes 7 steps to reach 1 when starting from 3.

Despite its apparent simplicity, these rules are the basis of a famously difficult math problem.
Mathematicians have yet to prove or disprove the Collatz conjecture, but that doesn't prevent us from exploring it ourselves.
Complete this program so that it performs the Collatz sequence and reports how many steps it took to return to 1.
--------
number = 27
steps = 0
for i in range(200):
    if number == 1:
        break
    elif number % 2 == 0:
        number = number / 2
        steps = steps + 1
    else:
        number = 3*number + 1
        steps = steps + 1 
if number == 1:
    print("It took", steps, "steps")
else:
    print("The number didn't reach 1 yet")
----
To program the Collatz sequence,
we need to check whether the number is even or odd, and perform the corresponding rule.
We also need to increment the step counter for any number besides 1 — if the number is 1 the process is done.
-------
number = 27
steps = 0
for i in range(200):
    if number == 1:
        break
    elif number % 2 == 0:
        number = number / 2
        steps = steps + 1
    else:
        number = 3*number + 1
        steps = steps + 1
    
if number == 1:
    print("It took", steps, "steps")
else:
    print("The number didn't reach 1 yet")
It took 111 steps
---------------



